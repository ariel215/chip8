//! Grammar for chip8 assembly with labels 
WHITESPACE=_{WHITE_SPACE}

decimal = {ASCII_DIGIT+}
hex = @{"0x" ~ ASCII_HEX_DIGIT+}
number = @{#hex = hex | #decimal = decimal}

register = @{^"V"~ASCII_HEX_DIGIT}
label = @{
    (!":"~ANY)+ ~":"
}

addr = {#fixed=number | #label=(!":"~ASCII)+}

load_args = {
      register ~ register 
    | #setchar=(^"f"~register) 
    | #bcd=(^"b"~register) 
    | #mem=(^"i"~number)
    | #setdelay=(^"dt"~register)
    | #getdelay=(register~^"dt")
    | #setsound = (^"st"~register)
    | #getkey = (register~^"k")
    | #regdmp = (^"[I]"~register)
    | #regload = (register~^"[I]")
}

cls = {^"cls"}
ret = {^"ret"}
nop = {^"nop"}
call = {^"call"~addr}
jump = {^"jp"~addr}
jpoff = {^"jp v0"~addr}
load = {^"ld"~load_args}
drw = {^"drw"~register~register~number}
add = {^"add"~(#addi=(^"i"~register) | register~(register | number)) }
se = {^"se" ~ register ~ (register | number)}
sne = {^"sne" ~ register ~ (register | number)}
sub = {^"sub"~register~register}
or =  {^"or"~register~register}
and = {^"and"~register~register}
xor = {^"xor"~register~register}
subn = {^"subn"~register~register}
rnd = {^"rnd"~register~number}
rsh = {^"rsh"~register}
lsh = {^"lsh"~register}
skp = {^"skp"~register}
sknp = {^"sknp"~register}

instruction = {  cls | ret | nop | jpoff | jump | se | sne | load 
                |add | sub | or | and | xor | rsh | lsh | subn
                | rnd | drw | skp | sknp 
}
line = {instruction | label }
file = _{SOI ~ NEWLINE* ~ (line~(";"?)~NEWLINE)+ ~ NEWLINE*~EOI}